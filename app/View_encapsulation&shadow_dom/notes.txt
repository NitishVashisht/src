Shadow dom or view encapsulation.


In one sentence, Shadow DOM is part of the Web Components standard
 and enables DOM tree and style encapsulation.
  DOM tree and style encapsulation? What does that even mean? Well, 
  it basically means that Shadow DOM allows us to hide DOM logic behind other elements.
   Addition to that, it enables us to apply scoped styles to elements without them bleeding 
   out to the outer world.

View encapsulation defines whether the template and styles defined within the component can 
affect the whole application or vice versa. Angular provides three encapsulation strategies:

Emulated (default) - styles from main HTML propagate to the component.
 Styles defined in this component's @Component decorator are scoped to this component only.

Native - styles from main HTML do not propagate to the component. 
Styles defined in this component's @Component decorator are scoped to this component only.

None - styles from the component propagate back to the main HTML and therefore are visible
 to all components on the page. Be careful with apps that have None and Native components
  in the application. All components with None encapsulation will have their styles duplicated 
  in all components with Native encapsulation.


None: The style is wrapped in a style tag and pushed to the head

Emulated: The style is wrapped in a style tag, pushed to head and uniquely identified
  so it can be matched with its component's template. With that, the styles will be
  used for only the template in the same component.
  
Native: Behaves as expected of web components.